from backend.bot.messangers.core import BaseState as State
from .utils import get_today_schedule, get_next_day_schedule
from datetime import datetime


class BootStrapState(State):
    def on_trigger(self, trigger):
        try:
            trigger.create_user()
        except:
            trigger.get_user()
        return EnterSecretCode()


class EnterSecretCode(State):
    """
        –í—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω –∏ –≤–≤–æ–¥ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
    """

    def __init__(self):
        self.buttons = ['', ]
        self.text = '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –Ω–∞ –≤–µ—Å–µ–Ω–Ω–µ–π —à–∫–æ–ª–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤ ‚òÄÔ∏è–ê–ª—É—à—Ç–µ.\n\n–î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã\n–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤'

    def on_enter(self, trigger):
        trigger.send_message(self.text)

    def on_trigger(self, trigger):
        user = trigger.get_user()
        user.second_name = trigger.text
        user.save()
        return MainMenu()


class MainMenu(State):
    """
        –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    """

    def __init__(self):
        self.buttons = ['üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', 'üó∫Ô∏è –ö–∞—Ä—Ç–∞', 'üåê VPN', 'üì∂ WiFi']
        # self.buttons = ['üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', 'üó∫Ô∏è –ö–∞—Ä—Ç–∞',  'üì∂ WiFi']
        self.text = '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'

    def on_enter(self, trigger):
        trigger.send_keyboard(self.text, self.buttons)

    def on_trigger(self, trigger):
        if trigger.text == self.buttons[0]:
            return Schedule()
        if trigger.text == self.buttons[1]:
            return Map()
        if trigger.text == self.buttons[2]:
            return VPN()
        if trigger.text == self.buttons[3]:
            return WiFi()
        trigger.send_keyboard("–ù–µ —Ä–∞–∑–æ–±—Ä–∞–ª –≤–∞—Å, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ", self.buttons)


class Map(State):
    """
        –ö–∞—Ä—Ç–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
    """

    def __init__(self):
        self.buttons = ['üîô –ù–∞–∑–∞–¥', ]
        self.text = "–ö–∞—Ä—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"

    def on_enter(self, trigger):
        trigger.send_photo('map.jpg')
        trigger.send_keyboard(self.text, self.buttons)

    def on_trigger(self, trigger):
        if trigger.text == self.buttons[0]:
            return MainMenu()


class VPN(State):
    """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∏ VPN
    """

    def __init__(self):
        self.buttons = ['üîô –ù–∞–∑–∞–¥', ]
        self.text = """<b>–°–ø–æ–Ω—Å–æ—Ä VPN\n–°—Ç—É–¥–µ–Ω—á–∏—Å–∫–∏–π –∫–ª—É–± Lambda.</b>\n
<b>Lambda</b> - —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π –ø—Ä–∞–∫—Ç–∏–∫—É–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤ –ø—Ä–∏ –ú–æ—Å–∫–æ–≤—Å–∫–æ–º –ê–≤–∏–∞—Ü–∏–æ–Ω–Ω–æ–º –ò–Ω—Å—Ç–∏—Ç—É—Ç–µ\n
<b>Lambda</b> ‚Äî —ç—Ç–æ:
    üî∏–ª–µ–∫—Ü–∏–∏ –∏ –æ–±–º–µ–Ω –æ–ø—ã—Ç–æ–º;
    üî∏—Å—Ç–∞—Ä—Ç–∞–ø—ã –∏ –≥—Ä–∞–Ω—Ç—ã;
    üî∏—Ö–∞–∫–∞—Ç–æ–Ω—ã –∏ –æ–ª–∏–º–ø–∏–∞–¥—ã;
    üî∏–ø–ª–æ—â–∞–¥–∫–∞ –¥–ª—è –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –∏–∑ IT –∫–æ–º–ø–∞–Ω–∏–π.
–ï—Å–ª–∏ –í—ã:
    üíª —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–∞–π—Ç—ã, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –∏–≥—Ä—ã –≤ –∫–æ–º–∞–Ω–¥–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤;
    üìö –Ω–∞–≥—Ä—É–∂–µ–Ω—ã —Ç–µ–æ—Ä–∏–µ–π –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏;
    üòé –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –æ–ø—ã—Ç–æ–º —Å–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏;
    üö© —Ç–æ–ª—å–∫–æ –≤ –Ω–∞—á–∞–ª–µ –ø—É—Ç–∏ –∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—É—á–∏—Ç—å—Å—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –Ω–∞ –Ω–∞—à–∏ —Å–æ–±—Ä–∞–Ω–∏—è. –°–∫—É—á–Ω–æ –Ω–µ –±—É–¥–µ—Ç —Ç–æ—á–Ω–æ!
https://lambda-it.ru/"""
        self.helper_text = """ –î–ª—è —Ä–∞–±–æ—Ç—ã —Å VPN –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è OpenVPN\n
- –¥–ª—è <a href="https://play.google.com/store/apps/details?id=net.openvpn.openvpn&hl=ru&gl=US">Android</a>
- –¥–ª—è <a href="https://apps.apple.com/ru/app/openvpn-connect/id590379981">iOS</a>
- –¥–ª—è <a href="https://openvpn.net/community-downloads/">Windows</a>
- –¥–ª—è <a href="https://openvpn.net/client-connect-vpn-for-mac-os/">MacOS</a>
- –¥–ª—è Linux —Ä–∞–∑–±–µ—Ä–µ—Ç–µ—Å—å —Å–∞–º–∏ ü§∑"""
        self.text_wait = "–ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è VPN –∫–ª—é—á–µ–π, –∫–∞–∫ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è –º—ã –≤–∞—Å –æ–ø–æ–≤–µ—Å—Ç–∏–º"

    def on_enter(self, trigger):
        # trigger.send_document('admin.ovpn')
        # trigger.send_message(self.helper_text)
        trigger.send_keyboard(self.text_wait, self.buttons)

    def on_trigger(self, trigger):
        if trigger.text == self.buttons[0]:
            return MainMenu()


class Schedule(State):
    """
        –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ú–ê–ò
    """

    def __init__(self):
        self.buttons = ['–°–µ–≥–æ–¥–Ω—è', '–ó–∞–≤—Ç—Ä–∞', 'üîô –ù–∞–∑–∞–¥']
        self.text = '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ'

    def on_enter(self, trigger):
        trigger.send_keyboard(self.text, self.buttons)

    def on_trigger(self, trigger):
        if trigger.text == self.buttons[0]:
            return ScheduleToday()
        if trigger.text == self.buttons[1]:
            return ScheduleNextDay()
        if trigger.text == self.buttons[2]:
            return MainMenu()
        trigger.send_keyboard("–∫–ª–∏–∫", self.buttons)


class ScheduleToday(State):
    """
        –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è –≤ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –ø–æ –¥–∞—Ç–µ
    """

    def __init__(self):
        self.buttons = ['üîô –ù–∞–∑–∞–¥']

    def on_enter(self, trigger):
        res = ""
        today = get_today_schedule()
        print(today)
        for item in today:
            res += item['title'] + '\n'
            res += "üìç " + item['location'] + '\n'
            print(item['time_start'])
            time_start = datetime.fromisoformat(item['time_start'])
            time_end = datetime.fromisoformat(item['time_end'])
            new_format = "%H:%M"
            res += "üïë " + str(time_start.strftime(new_format)) + " - " + str(time_end.strftime(new_format)) + '\n'
            res += '\n'
        trigger.send_keyboard(res, self.buttons)

    def on_trigger(self, trigger):
        if trigger.text == self.buttons[0]:
            return Schedule()


class ScheduleNextDay(State):
    """
        –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è –≤ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –ø–æ –¥–∞—Ç–µ
    """

    def __init__(self):
        self.buttons = ['üîô –ù–∞–∑–∞–¥']

    def on_enter(self, trigger):
        res = ""
        today = get_next_day_schedule()
        for item in today:
            res += item['title'] + '\n'
            res += "üìç " + item['location'] + '\n'
            time_start = datetime.fromisoformat(item['time_start'])
            time_end = datetime.fromisoformat(item['time_end'])
            new_format = "%H:%M"
            res += "üïë " + str(time_start.strftime(new_format)) + " - " + str(time_end.strftime(new_format)) + '\n'
            if item["speaker"]:
                res += "üë§ " + item["speaker"] + "\n"
            res += '\n'
        trigger.send_keyboard(res, self.buttons)

    def on_trigger(self, trigger):
        if trigger.text == self.buttons[0]:
            return Schedule()


class WiFi(State):
    """
        –î–∞–Ω–Ω—ã–µ –ø–æ –≤–∞–π—Ñ–∞–π
    """

    def __init__(self):
        self.buttons = ['üîô –ù–∞–∑–∞–¥', ]
        self.text = '–ù–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –ê–ª—É—à—Ç—ã —Å—Ç–æ—è—Ç 2 —Ç–æ—á–∫–∏ üì∂WiFi.\n\n1. üì∂MAI - –Ω–µ –∏–º–µ–µ—Ç –ø–∞—Ä–æ–ª—è, –Ω–µ–æ–±—Ö–æ–∏–¥–º–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø—É—Ç–µ–º –∑–≤–æ–Ω–∫–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω\n\n2. üì∂IT-CENTER - –ø–∞—Ä–æ–ª—å mathmode'

    def on_enter(self, trigger):
        trigger.send_keyboard(self.text, self.buttons)

    def on_trigger(self, trigger):
        if trigger.text == self.buttons[0]:
            return MainMenu()
        else:
            trigger.send_keyboard("–ù–µ —Ä–∞–∑–æ–±—Ä–∞–ª –≤–∞—Å, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ", self.buttons)
